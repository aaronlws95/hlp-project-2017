namespace ARM7TDMI

module Tokenizer=
    open InstructionType
    open MachineState
    open BasicActivePatterns

    let whiteSpace = [| ' '; '\f'; '\t'; '\r'; '\n'; ',' |] 

    //Split full source code into a list of lines  
    let splitIntoLines (text:string) = 
        text.Split [|'\r'; '\n'|]
        |> Array.toList
        |> List.filter ((<>) "") // delete empty strings generated by default .Split function
    
    //Split lines into a list of words (string Tokens)
    let splitIntoWords (line:string) = 
        line.ToUpper().Replace("["," [ ").Replace("]"," ] ").Replace("!"," ! ").Replace(":"," : ").Replace("="," = ").Split whiteSpace
        |> Array.toList
        |> List.filter ((<>) "") // delete empty strings generated by default .Split function

    //Split {S} or {B} from Inst{S}{Cond} or Inst{B}{Cond}
    let checkS_or_B (s:string) =
        match (if s.Length>0 then s.[0] else ' ') with
        | 'S' when s.Length>1 -> ["S";s.[1..]]
        | 'B' when s.Length>1 -> ["B";s.[1..]]
        | _   when s.Length>1 -> ["";s.[0..]]
        | 'S' -> ["S";""]
        | 'B' -> ["B";""]
        | _   -> ["";""]

    //Split dir from LDM[dir] or STR[dir]
    let checkdir (s:string) =
        match (if s.Length>1 then s.[0..1] else "") with
        | "ED" when s.Length>2 -> ["ED" ;s.[2..]]
        | "IB" when s.Length>2 -> ["IB" ;s.[2..]]
        | "FD" when s.Length>2 -> ["FD" ;s.[2..]]
        | "IA" when s.Length>2 -> ["IA" ;s.[2..]]
        | "EA" when s.Length>2 -> ["EA" ;s.[2..]]
        | "DB" when s.Length>2 -> ["DB" ;s.[2..]]
        | "FA" when s.Length>2 -> ["FA" ;s.[2..]]
        | "DA" when s.Length>2 -> ["DA" ;s.[2..]]
        | "ED"  -> ["ED" ;""]
        | "IB"  -> ["IB" ;""]
        | "FD"  -> ["FD" ;""]
        | "IA"  -> ["IA" ;""]
        | "EA"  -> ["EA" ;""]
        | "DB"  -> ["DB" ;""]
        | "FA"  -> ["FA" ;""]
        | "DA"  -> ["DA" ;""]
        | _ -> [""; s]

    //List [Inst; S/B ; Cond]
    let inst_S_or_B_Cond_ToList (inst:string) (rest:string) = inst::checkS_or_B rest

    //List [Inst; dir ; Cond]
    let inst_dir_Cond_ToList (inst:string) (rest:string) = inst::checkdir rest

    //List [Inst; S/B/dir ; Cond]
    let TokenizeInst (s:string)=
        match s with
        | Prefix "MOV" rest -> inst_S_or_B_Cond_ToList "MOV" rest   //1
        | Prefix "MVN" rest -> inst_S_or_B_Cond_ToList "MVN" rest   //2
        | Prefix "ADD" rest -> inst_S_or_B_Cond_ToList "ADD" rest   //3
        | Prefix "ADC" rest -> inst_S_or_B_Cond_ToList "ADC" rest   //4
        | Prefix "SUB" rest -> inst_S_or_B_Cond_ToList "SUB" rest   //5
        | Prefix "SBC" rest -> inst_S_or_B_Cond_ToList "SBC" rest   //6
        | Prefix "RSB" rest -> inst_S_or_B_Cond_ToList "RSB" rest   //7
        | Prefix "RSC" rest -> inst_S_or_B_Cond_ToList "RSC" rest   //8
        | Prefix "AND" rest -> inst_S_or_B_Cond_ToList "AND" rest   //9
        | Prefix "EOR" rest -> inst_S_or_B_Cond_ToList "EOR" rest   //10
        | Prefix "BIC" rest -> inst_S_or_B_Cond_ToList "BIC" rest   //11
        | Prefix "ORR" rest -> inst_S_or_B_Cond_ToList "ORR" rest   //12
        | Prefix "LSL" rest -> inst_S_or_B_Cond_ToList "LSL" rest   //13
        | Prefix "LSR" rest -> inst_S_or_B_Cond_ToList "LSR" rest   //14
        | Prefix "ASR" rest -> inst_S_or_B_Cond_ToList "ASR" rest   //15
        | Prefix "ROR" rest -> inst_S_or_B_Cond_ToList "ROR" rest   //16
        | Prefix "RRX" rest -> inst_S_or_B_Cond_ToList "ROR" rest   //17
        | Prefix "CMP" rest -> inst_S_or_B_Cond_ToList "CMP" rest   //18
        | Prefix "CMN" rest -> inst_S_or_B_Cond_ToList "CMN" rest   //19
        | Prefix "TST" rest -> inst_S_or_B_Cond_ToList "TST" rest   //20
        | Prefix "TEQ" rest -> inst_S_or_B_Cond_ToList "TEQ" rest   //21
        | Prefix "BL" rest -> inst_S_or_B_Cond_ToList "BL" rest     //22
        | Prefix "B" rest -> inst_S_or_B_Cond_ToList "B" rest       //23
        | Prefix "ADR" rest -> inst_S_or_B_Cond_ToList "ADR" rest   //24
        | Prefix "LDR" rest -> inst_S_or_B_Cond_ToList "LDR" rest   //25 - double
        | Prefix "STR" rest -> inst_S_or_B_Cond_ToList "STR" rest   //26
        | Prefix "LDM" rest -> inst_dir_Cond_ToList "LDM" rest   //27
        | Prefix "STM" rest -> inst_dir_Cond_ToList "STM" rest   //28
        | Prefix "END" rest -> inst_S_or_B_Cond_ToList "END" rest   
        | x -> [x; ""; ""]
   
