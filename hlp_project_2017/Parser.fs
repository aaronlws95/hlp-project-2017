namespace ARM7TDMI

module Parser=
    open InstructionType
    open MachineState
    open Cast
   
    let whiteSpace = [| ' '; '\f'; '\t'; '\r'; '\n'; ',' |]

    let readAsm textInput = 
        let splitIntoLines (text:string) = 
            text.Split [|'\r'; '\n'|]
            |> Array.toList
            |> List.filter ((<>) "") // delete empty strings generated by default .Split function
        let splitIntoWords (line:string) = 
            line.Split whiteSpace
            |> Array.toList
            |> List.filter ((<>) "") // delete empty strings generated by default .Split function
        let executeWordsAsCommand = 
            function
            | [ "MOV"; Cast.IsReg reg1; Cast.IsRegOrLit reg2 ] -> ALU(MOV(reg1,reg2),false)
            | [ "ADD"; Cast.IsReg reg1; Cast.IsReg reg2; Cast.IsRegOrLit reg3 ] -> ALU(ADD(reg1,reg2,reg3),false)
            //| [ IsLabel label ] -> ignore but no error
            | x -> failwithf "Unexpected match in parser: %s" x.[0]

        let instList = //: InstructionType list = 
            textInput
            |> splitIntoLines
            |> List.map splitIntoWords
            |> List.filter ((<>) [])
            |> List.map executeWordsAsCommand

        let init_memory = 
            seq { 0 .. instList.Length } 
            |> Seq.fold (fun (m: Map<Address, Memory>) i -> m.Add(Addr (i*4),Inst(instList.[i]))) Map.empty

        let init_reg = 
            [0..15] |> Seq.map (fun x -> (R x, 0)) |> Map.ofSeq

        { 
            //PC = Addr 0
            END = Addr (4*instList.Length)
            RegMap = init_reg
            MemMap = init_memory
            Flags = {N=false; Z=false; C=false; V=false}
            State = RunOK
        }