namespace ARM7TDMI

module Parser=
    open InstructionType
    open MachineState

    let testStringInput = 
        "
            MOV		R0, #10
            
            MOV		R1, #20
            ADD		R2, R0, R1
        "
    
    let whiteSpace = [| ' '; '\f'; '\t'; '\r'; '\n'; ',' |]
    
    /// matches string returning integer
    let (|IsLit|_|) (s:string) = 
        try 
            int s |> Some
        with _ -> None

    /// matches string returning integer
    let (|IsReg|_|) s =
        let ParseToReg =
            function
            | "R0" -> R 0
            | "R1" -> R 1
            | "R2" -> R 2
            (*
            | "R3" -> R3
            | "R4" -> R4
            *)
            //exception
            | _ -> invalidOp "register does not exist"  
        try 
            ParseToReg s |> Some
        with _ -> None
    /// matches RegOrLit string returning the RegOrLit

    let (|IsRegOrLit|_|) s =
        let parse=
            function
            | IsReg reg -> Reg(reg)
            | IsLit lit -> Lit(lit)
            | _ -> invalidOp "message"
        try
            parse s |> Some
        with _ -> None

    let readAsm textInput = 
        let splitIntoLines (text:string) = 
            text.Split [|'\r'; '\n'|]
            |> Array.toList
            |> List.filter ((<>) "") // delete empty strings generated by default .Split function
        let splitIntoWords (line:string) = 
            line.Split whiteSpace
            |> Array.toList
            |> List.filter ((<>) "") // delete empty strings generated by default .Split function
        let executeWordsAsCommand = 
            function
            | [ "MOV"; IsReg reg1; IsRegOrLit reg2 ] -> ALU(MOV(reg1,reg2))
            | [ "ADD"; IsReg reg1; IsRegOrLit reg2; IsRegOrLit reg3 ] -> ALU(ADD(reg1,reg2,reg3))
            | x -> failwithf "Unexpected match in parser: %s" x.[0]

        let instList = //: InstructionType list = 
            textInput
            |> splitIntoLines
            |> List.map splitIntoWords
            |> List.filter ((<>) [])
            |> List.map executeWordsAsCommand

        { 
            RegMap = Map.empty
            MemMap = Map.empty
            InstrList = instList
            Flags = {N=false; Z=false; C=false; V=false}
            State = RunOK
        }

