module Emulator =
    
    /// type given to you: command to be applied to environment
    type Command = 
        | Read of string 
        | Write of (string * int) 
        | Assign of (string * string)
        | Parse of (string)
        
    /// type given to you: response of environment to command
    type Response =
        | VarValue of int // for commands that return data
        | ParseError // if command string is invalid
        | DataError // if the required data does not exist
        | OK // for valid commads that return no data
    
    /// Return a new environment function with embedded stsate
    let makeEnvironment() = 
        let mutable state : Map<string, int> = Map []
        let whiteSpace = [| ' '; '\f'; '\t'; '\r' |]
        
        /// Returns value of v if this exists, or DataError
        let read v = 
            if Map.containsKey v state then VarValue state.[v]
            else DataError
        
        /// Sets v to value vNew
        let write v nNew = 
            state <- Map.add v nNew state
            OK
        
        /// Sets v1 to the value of v2 returning OK
        /// If v2 doies not exist returns DataError
        let assign v1 v2 = 
            if Map.containsKey v2 state then 
                state <- Map.add v1 state.[v2] state
                OK
            else DataError

        /// returns true if c is a alphabetic
        let isAlpha (c : char) = List.contains c ([ 'a'..'z' ] @ [ 'A'..'Z' ])
        
        /// returns true if string is all alphabetic chars
        let isName = 
            Seq.toList
            >> List.forall isAlpha
        
        /// matches integer string returning the integer
        let (|IsInt|_|) s = 
            try 
                int s |> Some
            with _ -> None
        
        /// Parse a string as a command and execute it
        let parse = 
            let splitIntoWords (s:string) = 
                s.Split whiteSpace 
                |> Array.filter ((<>) "") // delete empty strings generated by default .Split function
            let executeWordsAsCommand = function
                | [ "READ"; v ] when isName v -> read v
                | [ "WRITE"; v; IsInt n ] when isName v -> write v n
                | [ "ASSIGN"; v1; v2 ] when isName v1 && isName v2 -> assign v1 v2
                | _ -> ParseError            
            splitIntoWords
            >> Array.toList
            >> executeWordsAsCommand
        
        /// Environment function, executes command
        let environment = 
            function 
            | Read v -> read v
            | Write(v, n) -> write v n
            | Assign(v1, v2) -> assign v1 v2
            | Parse s -> parse s
        
        environment