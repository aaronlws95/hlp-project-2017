{"version":3,"sources":["..\\Cast.fs"],"names":[],"mappings":"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","file":"Cast.js","sourcesContent":["ï»¿namespace ARM7TDMI\r\n\r\nmodule Cast=\r\n    open InstructionType\r\n    open MachineState\r\n\r\n\r\n    /// matches string (X -> X) returning integer\r\n    let (|IsInt|_|) (s:string) = \r\n        try \r\n            int s |> Some\r\n        with _ -> None\r\n\r\n    ///matches string (#X->X) returning integer\r\n    let (|IsLit|_|) (s:string) = \r\n        let getX = s.[1..] \r\n        if s.[0]='#'\r\n        then\r\n            match getX with\r\n            | IsInt x -> Some(x)\r\n            | _ -> None\r\n        else\r\n            None\r\n\r\n    /// matches string returning register\r\n    let (|IsReg|_|) (s:string) =\r\n        let getX = s.[1..] \r\n        //let ParseToReg =\r\n        if s.[0]='R'\r\n        then\r\n            match getX with\r\n            | IsInt x when x<=15 -> R(x) |> Some\r\n            | _ -> None\r\n            //| \"R0\" -> R 0\r\n            //| \"R1\" -> R 1\r\n        else\r\n            None//invalidOp \"register does not exist\"\r\n\r\n\r\n    /// matches RegOrLit string returning the RegOrLit\r\n    let (|IsRegOrLit|_|) =\r\n        function\r\n        | IsReg reg -> Reg(reg) |> Some\r\n        | IsLit lit -> Lit(lit) |> Some\r\n        | _ -> None\r\n\r\n     /// matches string returning string\r\n    let (|IsLabel|_|) = \r\n        function\r\n        | IsReg x -> None\r\n        | s -> \r\n            try \r\n                string s |> Some \r\n            with _ -> None\r\n\r\n    //cast value to addr\r\n    let ValueToAddr (value:Value) =\r\n        match value with\r\n        | (x:int) -> Addr x\r\n    //cast value opttion to addr\r\n    let ValueOptToAddr (value:Option<Value>) =\r\n        match value with\r\n        | Some (x:int) -> Addr x\r\n        | None -> failwith \"R 15 has not been initialized or has been removed\"\r\n    //cast addr to value\r\n    let AddrToValue (addr:Address) =\r\n        match addr with\r\n        | Addr (x:int) -> (x:Value)\r\n\r\n    //check if one branch label returns bool for filter\r\n    let IsBranch =\r\n        function\r\n        | [IsLabel x] -> true\r\n        | _ -> false\r\n    //check if one branch label returns bool for filter\r\n    let IsNotBranch =\r\n        function\r\n        | [IsLabel x] -> false\r\n        | _ -> true\r\n\r\n    //check if instruction is valid\r\n    \r\n    //MOV and MVN\r\n    let (|IsMOVInst|_|)=\r\n        function\r\n        | \"MOV\" -> MOV |> Some\r\n        | \"MVN\" -> MVN |> Some\r\n        | _ -> None\r\n\r\n    //No forget ADR and LDR\r\n\r\n    //ALU\r\n    let (|IsALUInst|_|) =\r\n        function\r\n        | \"ADD\" -> ADD |> Some\r\n        | \"ADC\" -> ADC |> Some\r\n        | \"SUB\" -> SUB |> Some\r\n        | \"SBC\" -> SBC |> Some\r\n        | \"RSB\" -> RSB |> Some\r\n        //| \"RSC\" -> RSC |> Some\r\n        //| \"AND\" -> AND |> Some\r\n        | \"EOR\" -> EOR |> Some\r\n        | \"BIC\" -> BIC |> Some\r\n        | \"ORR\" -> ORR |> Some\r\n        | _ -> None\r\n       \r\n    //Shift\r\n    let (|IsShiftInst|_|) =\r\n        function\r\n        | \"LSL\" -> LSL |> Some\r\n        | \"LSR\" -> LSR |> Some\r\n        | \"ASR\" -> ASR |> Some\r\n        | \"ROR\" -> ROR |> Some\r\n        | _ -> None\r\n    \r\n    //No forget RRX\r\n\r\n    //compare\r\n    let (|IsCOMPInst|_|) =\r\n        function\r\n        | \"CMP\" -> CMP |> Some\r\n        | \"CMN\" -> CMN |> Some\r\n        | \"TST\" -> TST |> Some\r\n        | \"TEQ\" -> TEQ |> Some\r\n        | _ -> None\r\n\r\n    //No forget LDR and STR\r\n\r\n    //No forget LDM and STM\r\n\r\n    let (|IsBranchInst|_|) =\r\n        function\r\n        //| \"B\" -> B |> Some\r\n        //| \"BL\" -> BL |> Some\r\n        | _ -> None\r\n\r\n    let (|IsSetFlag|_|) =\r\n        function\r\n        | \"S\" -> true |> Some\r\n        | \"\" -> false |> Some\r\n        | _ -> None\r\n\r\n    let (|IsCondition|_|) =\r\n        function\r\n        | \"EQ\" -> EQ |> Some |> Some\r\n        | \"NE\" -> NE |> Some |> Some\r\n        | \"CS\" -> CS |> Some |> Some\r\n        | \"HS\" -> HS |> Some |> Some\r\n        | \"CC\" -> CC |> Some |> Some\r\n        | \"LO\" -> LO |> Some |> Some\r\n        | \"MI\" -> MI |> Some |> Some\r\n        | \"PL\" -> PL |> Some |> Some\r\n        | \"VS\" -> VS |> Some |> Some\r\n        | \"VC\" -> VC |> Some |> Some\r\n        | \"HI\" -> HI |> Some |> Some\r\n        | \"LS\" -> LS |> Some |> Some\r\n        | \"GE\" -> GE |> Some |> Some\r\n        | \"LT\" -> LT |> Some |> Some\r\n        | \"GT\" -> GT |> Some |> Some\r\n        | \"LE\" -> LE |> Some |> Some\r\n        | \"AL\" -> AL |> Some |> Some\r\n        | \"\" -> None |> Some\r\n        | _ -> None\r\n    //No forget DCD, EQU, FILL and END\r\n\r\n    let (|Prefix|_|) (p:string) (s:string) =\r\n        if s.StartsWith(p) then\r\n            Some(s.Substring(p.Length))\r\n        else\r\n            None\r\n\r\n    let checkS (s:string) =\r\n        if s <> \"\"\r\n        then \r\n            if s.[0] ='S'\r\n            then \"S\"\r\n            else \"\"\r\n        else \"\"\r\n    let checkCond (s:string) =\r\n        if s.Length = 2\r\n        then s\r\n        elif s.Length = 3\r\n        then s.[1..2]\r\n        elif s = \"S\"\r\n        then \"\"\r\n        else s\r\n\r\n    let toTuple (inst:string) (rest:string) = [inst; checkS rest; checkCond rest]\r\n\r\n    let TokenizeInst (s:string)=\r\n        match s with\r\n        | Prefix \"MOV\" rest -> toTuple \"MOV\" rest\r\n        | Prefix \"MVN\" rest -> toTuple \"MVN\" rest\r\n        | Prefix \"ADD\" rest -> toTuple \"ADD\" rest\r\n        | Prefix \"ADC\" rest -> toTuple \"ADC\" rest\r\n        | Prefix \"SUB\" rest -> toTuple \"SUB\" rest\r\n        | Prefix \"SBC\" rest -> toTuple \"SBC\" rest\r\n        | Prefix \"RSB\" rest -> toTuple \"RSB\" rest\r\n        | Prefix \"RSC\" rest -> toTuple \"RSC\" rest\r\n        | Prefix \"AND\" rest -> toTuple \"AND\" rest\r\n        | Prefix \"EOR\" rest -> toTuple \"EOR\" rest\r\n        | Prefix \"BIC\" rest -> toTuple \"BIC\" rest\r\n        | Prefix \"ORR\" rest -> toTuple \"ORR\" rest\r\n        | Prefix \"LSL\" rest -> toTuple \"LSL\" rest\r\n        | Prefix \"LSR\" rest -> toTuple \"LSR\" rest\r\n        | Prefix \"ASR\" rest -> toTuple \"ASR\" rest\r\n        | Prefix \"ROR\" rest -> toTuple \"ROR\" rest\r\n        | Prefix \"CMP\" rest -> toTuple \"CMP\" rest\r\n        | Prefix \"CMN\" rest -> toTuple \"CMN\" rest\r\n        | Prefix \"TST\" rest -> toTuple \"TST\" rest\r\n        | Prefix \"TEQ\" rest -> toTuple \"TEQ\" rest\r\n        | Prefix \"B\" rest -> toTuple \"B\" rest\r\n        | Prefix \"B\" rest -> toTuple \"BL\" rest\r\n        | x -> [x; \"\"; \"\"]\r\n      \r\n\r\n    \r\n\r\n    let ParseInstruction (strlist:string list)=\r\n        let instruction = TokenizeInst strlist.[0]\r\n        let basicinstruction = instruction.[0]//instruction.[0..2]\r\n        let setflag = instruction.[1]\r\n            (*if instruction.Length = 4 then (string)instruction.[3]\r\n            elif instruction.Length = 6 then (string)instruction.[3]\r\n            else \"\"*)\r\n        let condition = instruction.[2]\r\n            (*if instruction.Length = 5 then instruction.[3..4]\r\n            elif instruction.Length = 6 then instruction.[4..5]\r\n            else \"\"*)\r\n        let instrline = basicinstruction::setflag::condition::(strlist.Tail)\r\n        match instrline with\r\n        //normal with S or Cond or neither\r\n        | [ IsMOVInst inst; IsSetFlag sf; IsCondition cond; IsReg dest; IsRegOrLit op1 ] -> Line(ALU(inst(dest,op1),sf),None,cond)\r\n        | [ IsALUInst inst; IsSetFlag sf; IsCondition cond; IsReg dest; IsReg op1; IsRegOrLit op2 ] -> Line(ALU(inst(dest,op1,op2),sf),None,cond)\r\n        | [ IsShiftInst inst;  IsSetFlag sf; IsCondition cond;IsReg dest; IsReg op1; IsRegOrLit op2] -> Line(SHIFT(inst(dest,op1,op2),sf),None,cond)\r\n        | [ IsCOMPInst inst; IsSetFlag sf; IsCondition cond;IsReg dest; IsRegOrLit op1] -> Line(SF(inst(dest,op1)),None,cond)\r\n        //| [ IsBranchInst inst; IsCondition cond; IsLabel lab] ->\r\n        // with shifts\r\n        | [ IsMOVInst inst; IsSetFlag sf; IsCondition cond; IsReg dest; IsReg op1; \",\" ; IsShiftInst shiftinst; IsRegOrLit exp] -> Line(ALU(inst(dest,Reg(op1)),sf),shiftinst(op1,op1,exp)|> Some,cond)\r\n        | [ IsALUInst inst; IsSetFlag sf; IsCondition cond; IsReg dest; IsReg op1; IsReg op2 ; \",\" ; IsShiftInst shiftinst; IsRegOrLit exp] -> Line(ALU(inst(dest,op1,Reg(op2)),sf),shiftinst(op2,op2,exp)|> Some,cond)\r\n        | [ IsCOMPInst inst; IsSetFlag sf; IsCondition cond;IsReg dest; IsReg op1 ; \",\" ; IsShiftInst shiftinst; IsRegOrLit exp] -> Line(SF(inst(dest,Reg(op1))),shiftinst(op1,op1,exp)|> Some,cond)\r\n        | x -> failwithf \"Unexpected match in parser: %A\" x\r\n"]}