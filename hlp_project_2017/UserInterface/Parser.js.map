{"version":3,"sources":["..\\Parser.fs"],"names":[],"mappings":"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","file":"Parser.js","sourcesContent":["﻿namespace ARM7TDMI\r\n\r\nmodule Parser=\r\n    open InstructionType\r\n    open MachineState\r\n    open Cast\r\n   \r\n    let whiteSpace = [| ' '; '\\f'; '\\t'; '\\r'; '\\n'; ',' |]\r\n\r\n    let readAsm textInput =\r\n        let splitIntoLines (text:string) = \r\n            text.Split [|'\\r'; '\\n'|]\r\n            |> Array.toList\r\n            |> List.filter ((<>) \"\") // delete empty strings generated by default .Split function\r\n        let splitIntoWords (line:string) = \r\n            line.Replace(\"[\",\" [ \").Replace(\"]\",\" ] \").Replace(\"!\",\" ! \").Replace(\":\",\" : \").Replace(\"=\",\" = \").Split whiteSpace\r\n            |> Array.toList\r\n            |> List.filter ((<>) \"\") // delete empty strings generated by default .Split function\r\n\r\n        let lineList = //: string list list = \r\n            textInput\r\n            |> splitIntoLines\r\n            |> List.map splitIntoWords\r\n            |> List.filter ((<>) [])\r\n\r\n        let branch_map =\r\n            let chooseAddr (b:Map<string,Address>) i =\r\n                match lineList.[i] with\r\n                | IsLabel x::IsLabel _::IsReg _::_ -> b.Add(x,(Addr (i*4)))\r\n                | _ -> b   \r\n            seq { 0 .. lineList.Length - 1 } \r\n            |> Seq.fold chooseAddr Map.empty\r\n\r\n        let remove_branch_label line=\r\n            match line with\r\n            | IsLabel _::IsLabel _::IsReg _::_ -> line.Tail\r\n            | x -> x   \r\n\r\n        let executeWordsAsCommand (strlist:string list)= //: InstructionLine\r\n            let instruction = TokenizeInst strlist.[0]\r\n            let basicinstruction = instruction.[0]//instruction.[0..2]\r\n            let setflag_or_byte = instruction.[1]\r\n                (*if instruction.Length = 4 then (string)instruction.[3]\r\n                elif instruction.Length = 6 then (string)instruction.[3]\r\n                else \"\"*)\r\n            let condition = instruction.[2]\r\n                (*if instruction.Length = 5 then instruction.[3..4]\r\n                elif instruction.Length = 6 then instruction.[4..5]\r\n                else \"\"*)\r\n            let instrline = basicinstruction::setflag_or_byte::condition::(strlist.Tail)\r\n            match instrline with\r\n            //normal with S or Cond or neither\r\n            | [ IsMOVInst inst; IsSetFlag sf; IsCondition cond; IsReg dest; IsRegOrLit op1 ] -> Line(ALU(inst(dest,op1),sf),None,CondCast cond)\r\n            | [ IsALUInst inst; IsSetFlag sf; IsCondition cond; IsReg dest; IsReg op1; IsRegOrLit op2 ] -> Line(ALU(inst(dest,op1,op2),sf),None,CondCast cond)\r\n            | [ IsShiftInst inst;  IsSetFlag sf; IsCondition cond;IsReg dest; IsReg op1; IsRegOrLit op2] -> Line(SHIFT(inst(dest,op1,op2),sf),None,CondCast cond)\r\n            | [ \"RRX\"; IsSetFlag sf; IsCondition cond;IsReg dest; IsReg exp]-> Line(SHIFT(RRX(dest,exp),sf),None,CondCast cond)\r\n            | [ IsCOMPInst inst; _ ; IsCondition cond;IsReg dest; IsRegOrLit op1] -> Line(SF(inst(dest,op1)),None,CondCast cond)\r\n            | [ IsBranchInst inst; _ ; IsCondition cond; IsAddr branch_map addr] -> Line(BRANCH(inst(addr)),None,CondCast cond)\r\n            // with shifts\r\n            | [ IsMOVInst inst; IsSetFlag sf; IsCondition cond; IsReg dest; IsReg op1 ; IsShiftInst shiftinst; IsRegOrLit exp] -> Line(ALU(inst(dest,Reg(op1)),sf),shiftinst(op1,op1,exp)|> Some,CondCast cond)\r\n            | [ IsALUInst inst; IsSetFlag sf; IsCondition cond; IsReg dest; IsReg op1; IsReg op2 ; IsShiftInst shiftinst; IsRegOrLit exp] -> Line(ALU(inst(dest,op1,Reg(op2)),sf),shiftinst(op2,op2,exp)|> Some,CondCast cond)\r\n            | [ IsCOMPInst inst; IsSetFlag sf; IsCondition cond;IsReg dest; IsReg op1 ; IsShiftInst shiftinst; IsRegOrLit exp] -> Line(SF(inst(dest,Reg(op1))),shiftinst(op1,op1,exp)|> Some,CondCast cond)\r\n            //Memory Instructions\r\n            | [ \"ADR\"; IsSetFlag sf; IsCondition cond; IsReg dest; IsAddr branch_map addr] -> Line(MEM(ADR(dest,addr)),None,CondCast cond)\r\n            //| [ \"LDR\"; IsSetFlag sf; IsCondition cond; IsReg dest; \"=\"; IsAddr branch_map addr] -> Line(MEM(LDR(dest,addr)),None,CondCast cond)\r\n            //LDR STR\r\n            | [ IsMEMRInst inst; IsByteMode b; IsCondition cond; IsReg dest; \"[\" ; IsReg source; \"]\" ] ->  Line(MEM(inst(dest,source,Lit 0,Lit 0,b)),None,CondCast cond)\r\n            | [ IsMEMRInst inst; IsByteMode b; IsCondition cond; IsReg dest; \"[\" ; IsReg source; IsRegOrLit offset; \"]\" ] ->  Line(MEM(inst(dest,source,offset,Lit 0,b)),None,CondCast cond)\r\n            | [ IsMEMRInst inst; IsByteMode b; IsCondition cond; IsReg dest; \"[\" ; IsReg source; IsRegOrLit offset; \"]\"; \"!\" ] ->  Line(MEM(inst(dest,source,offset,Lit 0,b)),None,CondCast cond)\r\n            | [ IsMEMRInst inst; IsByteMode b; IsCondition cond; IsReg dest; \"[\" ; IsReg source; \"]\";  IsRegOrLit offset ] ->  Line(MEM(inst(dest,source,offset,Lit 0,b)),None,CondCast cond)\r\n            //LDM STM\r\n            | [ IsMEMMInst inst; _ ; _ ; \"[\" ; IsLDMdir dir; \"]\"; IsCondition cond; IsReg source ] ->  Line(MEM(inst(dir,source,[],false)),None,CondCast cond)\r\n            | [ IsMEMMInst inst; _ ; _ ; \"[\" ; IsLDMdir dir; \"]\"; IsReg source ] ->  Line(MEM(inst(dir,source,[],false)),None,None)\r\n            | IsMEMMInst inst::_::_::\"[\"::IsLDMdir dir::\"]\"::IsCondition cond::IsReg source::IsRegList reglist ->  Line(MEM(inst(dir,source,reglist,false)),None,CondCast cond)\r\n            | IsMEMMInst inst::_::_::\"[\"::IsLDMdir dir::\"]\"::IsReg source::IsRegList reglist ->  Line(MEM(inst(dir,source,reglist,false)),None,None)\r\n            | x -> failwithf \"Unexpected match in parser: %A\" x\r\n\r\n        let instList = //: InstructionType list = \r\n            lineList\r\n            |> List.map remove_branch_label   \r\n            |> List.map executeWordsAsCommand\r\n\r\n        let init_reg = \r\n            [0..15] |> Seq.map (fun x -> (R x, 0)) |> Map.ofSeq\r\n        \r\n        let init_memory =\r\n            let chooseAddr (m:Map<Address,Memory>) i = m.Add(Addr(i*4),Inst(instList.[i]))\r\n            seq { 0 .. instList.Length - 1 } \r\n            |> Seq.fold chooseAddr Map.empty\r\n\r\n        { \r\n            //PC = Addr 0 // PC is now Reg 15\r\n            END = Addr (4*instList.Length)\r\n            RegMap = init_reg\r\n            MemMap = init_memory\r\n            Flags = {N=false; Z=false; C=false; V=false}\r\n            State = RunOK\r\n        }"]}