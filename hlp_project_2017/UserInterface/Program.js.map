{"version":3,"sources":["..\\Program.fs"],"names":[],"mappings":";;;;;;;;;;;;AA2BY;AAAA;AAAW;;AACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACK;AAAA;AAAA;AAA4B;AAF3B;AAAA;;AAQC;AAAA,mCAAb,uBAAa;AAAmB;;AAMhC;AAAQ,mCAAR;AAAA;AAAA,WAAc,aAAd;AAAA;AAGC","file":"Program.js","sourcesContent":["ï»¿// Learn more about F# at http://fsharp.org\r\n// See the 'F# Tutorial' project for more help.\r\nnamespace ARM7TDMI\r\n\r\nmodule Program = \r\n    open Parser\r\n    open Emulator\r\n    open MachineState\r\n    open InstructionType\r\n    open Cast\r\n\r\n//    let s = \r\n//        \"MOV R1 R2\r\n//    ADD R2 R3 #3\r\n//    MYBRANCH MVN R2 #2\r\n//    CMP R13 R2 , LSL #10\r\n//    LSL R6 R7 #10\r\n//    ASR R8 R9 R10\r\n//    ADDS R3 R13 #15\r\n//    ADDSEQ R3 R13 #15\r\n//    ADDLO R3 R13 #15\" \r\n\r\n    let test = \"MOV R1 #10\r\n    MOV R2 #20\r\n    ADD R3 R1 R2\"\r\n\r\n    let rec executeInstructions (state:MachineState) = \r\n        let newState = Emulator.Instruction.executeLine state \r\n        match newState.State with\r\n        | RunOK -> executeInstructions newState\r\n        | RunEND -> newState\r\n        | RunTimeErr s-> state\r\n        | SyntaxErr s -> state\r\n\r\n    let execute (s:string)=\r\n        readAsm s |> executeInstructions\r\n\r\n    //[<EntryPoint>]\r\n    let main argv = \r\n        // Recursively execute the instructions of subsequent states\r\n        \r\n        printfn \"%A\" (execute test)\r\n\r\n        //System.Console.ReadKey() |> ignore\r\n        0 // return an integer exit code\r\n     "]}