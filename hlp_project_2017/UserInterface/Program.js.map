{"version":3,"sources":["..\\Program.fs"],"names":[],"mappings":";;;;;;;;;;;AASsC;AAAA;AAAS;;AAInC;AAAA;AAAW;;AACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACK;AAAA;AAAA;AAA4B;AAF3B;AAAA;;AAOU;AAAA,mCAAtB,mBAAsB;AAAmB;;AAIzC;AAAQ,iEAAR;AAAA;AAAA,WAA2C,iBAAc,wCAAd,CAA3C;;AACM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACK;AAAA;AAAsC;AAG3B","file":"Program.js","sourcesContent":["ï»¿namespace ARM7TDMI\r\n\r\nmodule Program = \r\n    open Parser\r\n    open Emulator\r\n    open MachineState\r\n    open InstructionType\r\n\r\n    // Initialize registers to 0, read editor code into state instructions\r\n    let initMachineState (s:string) = readAsm s\r\n\r\n    // Execute recursively until program end\r\n    let rec executeInstructions (state:MachineState) = \r\n        let newState = Emulator.Instruction.executeLine state \r\n        match newState.State with\r\n        | RunOK -> executeInstructions newState\r\n        | RunEND -> newState\r\n        | RunTimeErr s-> newState\r\n        | SyntaxErr s -> newState\r\n    let execute (s:string)=\r\n        initMachineState s |> executeInstructions\r\n\r\n    // Execute one line at a time \r\n    let stepForward (s:string) (state:MachineState) =\r\n        printfn \"Running instruction at memory %A\" state.RegMap.[R 15] |> ignore\r\n        match state.State with\r\n        | RunOK -> Emulator.Instruction.executeLine state \r\n        | RunEND -> state\r\n        | RunTimeErr s-> state\r\n        | SyntaxErr s -> state\r\n\r\n     "]}