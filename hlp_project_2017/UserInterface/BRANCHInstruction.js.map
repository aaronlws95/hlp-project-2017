{"version":3,"sources":["..\\BRANCHInstruction.fs"],"names":[],"mappings":";;;;;;;;AAWY;AAAA;;AACM,uCAGF;AAAA;;AAAA,wBAEG;AAAS;AAAT;AAAuB,aAAvB,GAFH,CACG,cAAS,wCAAT,EAAgB,iBAAc,wCAAd,KAAhB,eADH;AAE0B,SALxB,MACe;AAAA;AAAA,sCAAS,wCAAT;AAAoC;;AAK7D;AAPa","file":"BRANCHInstruction.js","sourcesContent":["ï»¿namespace ARM7TDMI\r\n\r\n/// ===========================================\r\n/// Branching functions\r\n/// ===========================================\r\n\r\nmodule BRANCHInstruction = \r\n    open InstructionType \r\n    open MachineState\r\n    /// execute set flag instruction\r\n    let executeInstruction state instruction = \r\n        let newRegMap = \r\n            match instruction with\r\n            | B(Addr(target)) -> Map.add (R 15) (target) state.RegMap // Replace R15 (PC) with target address\r\n            | BL(Addr(target)) -> \r\n                state.RegMap \r\n                |> Map.add (R 14) (state.RegMap.[R 15] + 4) // Replace R14 (LR) with PC+4\r\n                |> Map.add (R 15) (target) // Replace R15 (PC) with target address\r\n        {state with RegMap = newRegMap}"]}