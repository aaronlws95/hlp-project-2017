{"version":3,"sources":["..\\UserInterface.fs"],"names":[],"mappings":"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","file":"UserInterface.js","sourcesContent":["ï»¿namespace ARM7TDMI\r\n\r\nmodule UserInterfaceController =\r\n    open System\r\n    open System.Text\r\n    open Fable.Core\r\n    open Fable.Import\r\n    open Fable.Import.Browser\r\n    open Fable.Core.JsInterop\r\n    open Parser\r\n    open MachineState\r\n    open InstructionType\r\n\r\n    type Base = Bin | Dec | Hex\r\n\r\n    //parse MachineState for output\r\n    let getRegister (state:MachineState) i = state.RegMap.TryFind(R i) |> string |> int\r\n    let getMemory (state:MachineState) address = state.MemMap.TryFind(Addr address)\r\n    let getState (state:MachineState) = state.State\r\n    let getFlags (state:MachineState) = \r\n        let flags = state.Flags\r\n        //fable ignores System.Convert.ToInt32(boolean)\r\n        [flags.N; flags.Z; flags.C; flags.V] |> List.map (fun x -> match x with | true -> 1 | _ -> 0) |> List.toArray\r\n\r\n(* \r\n    //base conversion for registers \r\n    //discarded due to unable to conver negative numbers\r\n    let toBin (dec: int) = \r\n        //Convert.ToString(dec, 2)\r\n        let rec convert dec = \r\n            match dec with\r\n            | 0 | 1 -> string dec\r\n            | _ -> \r\n                let bit = string (dec % 2)\r\n                convert (dec/2) + bit\r\n        convert dec \r\n\r\n    let toHex (dec: int) = \r\n        //Convert.ToString(dec, 16)\r\n        let toArray byte = [|byte|]\r\n        let toBit (remainder: int) = \r\n            match remainder with\r\n                | remainder when remainder <= 9 -> string remainder\r\n                //| remainder when remainder <= 15 -> remainder |> (+) 55 |> System.Convert.ToByte |> toArray |> Encoding.ASCII.GetString \r\n                | 10 -> \"A\"\r\n                | 11 -> \"B\"\r\n                | 12 -> \"C\"\r\n                | 13 -> \"D\"\r\n                | 14 -> \"E\"\r\n                | 15 -> \"F\"\r\n                | _ -> \"ErrorBit\"\r\n        let rec convert dec = \r\n            match dec with\r\n            | dec when dec <= 9 -> string dec\r\n            | dec when dec <= 15 -> toBit dec\r\n            | _ -> \r\n                let bit = dec % 16 |> toBit\r\n                convert (dec/16) + bit\r\n        convert dec        *)\r\n    \r\n\r\n    // using javascript native base conversion method\r\n    let toBaseOf (targetBase:int) (dec: int)  = \r\n        (uint32 dec)?toString(targetBase) |>string\r\n\r\n    let toDec (sourceBase: int) (numberString: string) =\r\n        window?parseInt(numberString, sourceBase) |> string |> int\r\n\r\n    // reformat the output\r\n    let toBin (dec: int) = \r\n        let bin = dec |> toBaseOf 2\r\n        [0..7] |> List.map (fun x -> bin.[(x*4)..(x*4+3)]) |> String.concat \" \"\r\n        \r\n    let toHex (dec: int) = \r\n        let hex = (dec |> toBaseOf 16).ToUpper();\r\n        [0..3] |> List.map (fun x -> hex.[(x*2)..(x*2+1)]) |> String.concat \" \"\r\n\r\n    //one-way update\r\n    let timeNow() = System.DateTime.Now.ToLongTimeString()\r\n    let showRegisters (state:MachineState) (currentBase: Base) = \r\n        console.info(timeNow(), \"\\tUpdating Register Values ...\");\r\n        let updateRegister i currentBase=\r\n            let value = getRegister state i\r\n            let DOMElement = document.getElementById ((\"R\" + (string i))) :?>HTMLSpanElement\r\n            let diplayValue = \r\n                match currentBase with\r\n                    | Bin -> value |> toBin |> (+) \"0b\"\r\n                    | Hex -> value |> toHex |> (+) \"0x\"\r\n                    | _ -> value |> string\r\n            DOMElement.textContent <- diplayValue\r\n            //console.log(timeNow(), \"\\tR\" + (string i) + \"=\" + diplayValue);\r\n        [0..15] |> List.map (fun i -> updateRegister i currentBase) |> ignore\r\n        console.info(timeNow(), \"\\tRegister values update successful.\");\r\n    \r\n    let showFlags (state: MachineState) =\r\n        let flags = getFlags state\r\n        let updateFlag i = \r\n            let flag = document.getElementById ((\"CSPR\" + (string i))) :?>HTMLSpanElement\r\n            flag.textContent <- flags.[i-1] |> string\r\n        console.info(timeNow(), \"\\tCSPR Bits are\", flags);\r\n        [1..4] |> List.map (fun i -> updateFlag i) |> ignore\r\n        console.info(timeNow(), \"\\tCSPR Bits update successful.\");\r\n    \r\n    let showStatus (msg: string) = \r\n        //display message in status footbar\r\n        let DOMElement = document.getElementById (\"status-msg\") :?>HTMLSpanElement\r\n        DOMElement.textContent <- msg\r\n        console.info(timeNow(), \"\\t\" + msg);\r\n    \r\n    let showState (state: MachineState) = \r\n        let runState = getState state\r\n        let StateMsg = \r\n            match runState with \r\n                | RunOK -> \"Execution was successful.\"\r\n                | RunTimeErr _ -> (\"Runtime Error: \" + (toJson runState))\r\n                | SyntaxErr _ -> (\"Syntax Error: \" + (toJson runState))\r\n                | RunEND -> \"Execution was successful. The final instruction is reached.\"                \r\n        showStatus StateMsg    \r\n    \r\nmodule UserInterface =\r\n    open Fable.Core\r\n    open Fable.Import\r\n    open Fable.Import.Browser\r\n    open Fable.Core.JsInterop\r\n    open UserInterfaceController\r\n    open MachineState\r\n    open InstructionType\r\n    open Program\r\n\r\n    let mutable currentBase = Hex\r\n    let mutable currentState = execute \"MOV R0, #0\"\r\n\r\n    console.info(timeNow(), \"\\tFable Application Loaded\")\r\n    console.log(\"%c ARMadillo - HLP Project 2017\", \"background: #222; color: #bada55\");\r\n    console.log(\"%c Parser:\\t Rubio, Santiago P L \", \"background: #222; color: #bada55\");\r\n    console.log(\"%c Emulator:\\t Low, Aaron S \\t Chan, Jun S\", \"background: #222; color: #bada55\");\r\n    console.log(\"%c Front-end:\\t Wang, Tianyou\", \"background: #222; color: #bada55\");\r\n\r\n    let changeBase (state: MachineState) (toBase: Base) = \r\n        showRegisters state toBase\r\n        let baseValue = \r\n            match toBase with\r\n                | Bin -> \"02\"\r\n                | Hex -> \"16\"\r\n                | _ -> \"10\"\r\n        let DOMElement = document.getElementById (\"base\") :?>HTMLSpanElement\r\n        DOMElement.textContent <- baseValue\r\n        currentBase <- toBase\r\n        console.info(timeNow(), \"\\tChanged register display base to\", (toJson toBase));\r\n\r\n    //button functions\r\n    let execute() =\r\n        console.info(timeNow(), \"\\tExecuting Source Code...\")\r\n        //get values from input elements\r\n        let sourceCode = window?getEditorContent() |> string\r\n        currentState <- execute sourceCode\r\n\r\n        showRegisters currentState currentBase\r\n        showFlags currentState\r\n        showState currentState\r\n        //[0..4..32] |> List.map (fun x -> console.log((getMemory currentState x))) |> ignore\r\n\r\n    let reset() = \r\n        console.info(timeNow(), \"\\tResetting Machine State...\")\r\n        //get values from input elements\r\n        let sourceCode = window?getEditorContent() |> string\r\n        currentState <- initMachineState sourceCode\r\n\r\n        showRegisters currentState currentBase\r\n        showFlags currentState\r\n        showState currentState\r\n\r\n    let stepForward() = \r\n        console.info(timeNow(), \"\\tStepping forward...\")\r\n        //get values from input elements\r\n        let sourceCode = window?getEditorContent() |> string\r\n        let prevState = currentState\r\n        currentState <- stepForward sourceCode prevState\r\n        // Display\r\n        showRegisters currentState currentBase\r\n        showFlags currentState\r\n        showState currentState\r\n        window?setLineDecoration((getRegister currentState 15)/4) |>ignore\r\n    \r\n    let memoryLookup() = \r\n        let startAddr = (document.getElementById (\"memory-start\") :?>HTMLInputElement).value |>string\r\n        let endAddr = (document.getElementById (\"memory-end\") :?>HTMLInputElement).value |>string\r\n        console.info(timeNow(), \"\\tLooking up memory content for query Addr: 0x\" + startAddr, \"- 0x\" + endAddr);\r\n\r\n        // the result should cover user query range (word addr)\r\n        let wordStartAddr = (toDec 16 startAddr) / 32 \r\n        let wordEndAddr = (toDec 16 endAddr) / 32\r\n\r\n        let byteStartAddr = wordStartAddr * 4\r\n        let byteEndAddr = (wordEndAddr + 1) * 4\r\n\r\n        //[byteStartAddr..byteEndAddr] |> List.map (fun x -> console.log(x,\":\",getMemory currentState x)) |> ignore\r\n        \r\n        let toTable = \r\n            let wordHeadBytes = [byteStartAddr..4..byteEndAddr] \r\n            let renderInst headByte (inst) = \r\n                (\"<span class='label label-primary'>0x\" + (toBaseOf 16 (headByte*8)).ToUpper() + (\"</span>\"), \"<span class='label label-success'>Instr</span>\", (toJson inst)) \r\n                \r\n            let renderVal headByte = \r\n                let wordValue = [3..0] |> List.map (fun x -> getMemory currentState (headByte + x))\r\n                //wordValue = (getMemory currentState (headByte+3),getMemory currentState (headByte+2),getMemory currentState (headByte+1),getMemory currentState headByte)\r\n                (\"<span class='label label-primary'>0x\" + (toBaseOf 16 (headByte*8)).ToUpper() + (\"</span>\"), \"<span class='label label-warning'>Value</span>\", (toJson wordValue))\r\n\r\n            let combineWord wordHeadByte= \r\n                let firstByteContent = getMemory currentState wordHeadByte\r\n                match firstByteContent with\r\n                    | Some x -> match x with\r\n                                    | Inst _ -> renderInst wordHeadByte firstByteContent\r\n                                    | Val _ -> renderVal wordHeadByte\r\n                    | None -> (\"<span class='label label-primary'>0x\" + (toBaseOf 16 (wordHeadByte*8)).ToUpper() + (\"</span>\"), \"<span class='label label-default'>Null</span>\", \"0\")\r\n            let dataSet = [byteStartAddr..4..byteEndAddr] |>List.map combineWord |>toJson\r\n            window?data <- dataSet\r\n            window?displayMemoryQuery(dataSet);\r\n        //do not remove: return false to prevent refresh on form submit\r\n        false\r\n\r\n    let changeBaseToBin() =\r\n        changeBase currentState Bin\r\n    let changeBaseToDec() =\r\n        changeBase currentState Dec\r\n    let changeBaseToHex() =\r\n        changeBase currentState Hex\r\n\r\n    //get button elements\r\n    let getButton buttonId= \r\n        document.getElementById (buttonId) :?>HTMLButtonElement\r\n\r\n    let executeButton = getButton (\"execute\")\r\n    let resetButton = getButton (\"reset\")\r\n    let stepForwardButton = getButton (\"step-forward\")\r\n    let toBinButton = getButton(\"toBin\")\r\n    let toDecButton = getButton (\"toDec\")\r\n    let toHexButton = getButton (\"toHex\")\r\n    \r\n    //register events to buttons\r\n    executeButton.addEventListener_click(fun _ ->(execute());null)\r\n    resetButton.addEventListener_click(fun _ ->(reset());null)\r\n    stepForwardButton.addEventListener_click(fun _ ->(stepForward());null)\r\n    toBinButton.addEventListener_click(fun _ ->(changeBaseToBin());null)\r\n    toDecButton.addEventListener_click(fun _ ->(changeBaseToDec());null)\r\n    toHexButton.addEventListener_click(fun _ ->(changeBaseToHex());null)\r\n\r\n    // get memory lookup tool element\r\n    let memoryToolFormElement = document.getElementById (\"memory-tool\") :?>HTMLFormElement\r\n    memoryToolFormElement?onsubmit <- ( fun _ ->memoryLookup())"]}