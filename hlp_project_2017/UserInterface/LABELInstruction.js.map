{"version":3,"sources":["..\\LABELInstruction.fs"],"names":[],"mappings":";;;;;;;;AAWY;AAAyB,kEAAwC,gBAAxC,EAAoD,cAAS,oDAAT,EAAuB,0CAAvB,eAApD;AAC7B;AADe;;AAIX;AAA6B,mEAAqC,gBAArC,EAAiD,cAAS,oDAAT,EAAuB,uCAAvB,eAAjD,6BAAf,iBAAC,0BAAD,CAAe;AACjC;AADe;;AAIf;AAAsB,6CAAgB,2CAAhB;AAAtB;AAA+D;;AAG3D;AAAK;AAAA;AAAyB,SAAzB;;AACH,yCAEqB;AAAA,+BAAY,yBAAZ;AAA+B,SAFpD,sCAGiB;AAAA;AAAsB,SAHvC,MACqB;AAAA,8BAAW,yBAAX;AAA+B;AAFpD","file":"LABELInstruction.js","sourcesContent":["ï»¿namespace ARM7TDMI\r\n/// ===========================================\r\n/// LABEL functions\r\n/// ===========================================\r\nmodule LABELInstruction =      \r\n    open InstructionType \r\n    open MachineState\r\n    open EmulatorHelper\r\n\r\n    /// DCD: Set values in memory  \r\n    let private dcd state startMem intList = \r\n        let _,newMemMap = intList |> List.fold (fun (memLoc,accMap) elem -> (memLoc + 4),Map.add (Addr memLoc) (Val elem) accMap) (startMem,state.MemMap)\r\n        {state with MemMap = newMemMap}\r\n    /// FILL: Allocate space in memory\r\n    let private fill state startMem length = \r\n        let _,newMemMap = [1..length] |> List.fold (fun (memLoc,accMap) _ -> (memLoc + 4),Map.add (Addr memLoc) (Val 0) accMap) (startMem,state.MemMap)\r\n        {state with MemMap = newMemMap}\r\n    /// EQU: Set a constant in memory\r\n    let private equ state memLoc value = \r\n        {state with MemMap = (Map.add memLoc (Val value) state.MemMap)} \r\n    /// execute a set label instruction\r\n    let executeInstruction state instruction = \r\n        let ga = Extractor.getAddressValue\r\n        match instruction with\r\n        | DCD(startMem,intList) -> dcd state (ga startMem) intList //DCD\r\n        | FILL(startMem,length) -> fill state (ga startMem) length //FILL\r\n        | EQU(memLoc,value) -> equ state memLoc value //EQU\r\n\r\n\r\n\r\n"]}