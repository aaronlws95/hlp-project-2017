<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>visual</name></assembly>
<members>
<member name="M:VisualInterface.CreateRandomMemTest.createdRandMultMemTestList(System.Int32,System.String,System.String)">
<summary>
 create list of tests, each a random memory instruction
 Use RAND for random instructions
</summary>
</member>
<member name="P:VisualInterface.CreateRandomMemTest.getRandInstMultName">
<summary>
 get random instruction name 
</summary>
</member>
<member name="M:VisualInterface.CreateRandomMemTest.createRandomMultMemTest(System.String,System.String)">
<summary>
create random test string for Visual and Instruction for Emulator for memory instructions
</summary>
</member>
<member name="M:VisualInterface.CreateRandomMemTest.createdRandMemTestList(System.Int32,System.String,System.String,System.String)">
<summary>
 create list of tests, each a random memory instruction
 Use RAND for random instructions
</summary>
</member>
<member name="P:VisualInterface.CreateRandomMemTest.getRandInstName">
<summary>
 get random instruction name 
</summary>
</member>
<member name="M:VisualInterface.CreateRandomMemTest.createRandomMemTest(System.String,System.String,System.String)">
<summary>
create random test string for Visual and Instruction for Emulator for memory instructions
</summary>
</member>
<member name="P:VisualInterface.CreateRandomMemTest.rand">
<summary>
random seed
</summary>
</member>
<member name="M:VisualInterface.CreateRandomTest.createdRandTestListAll(System.Int32)">
<summary>
create n random tests for each valid instruction
</summary>
</member>
<member name="M:VisualInterface.CreateRandomTest.createdRandTestList(System.Int32,System.String,System.String,System.String)">
<summary>
 create list of tests, each a random instruction
 Use RAND for random instructions
</summary>
</member>
<member name="P:VisualInterface.CreateRandomTest.instNameArr">
<summary>
array of all valid instruction names
</summary>
</member>
<member name="M:VisualInterface.CreateRandomTest.createRandomTest(System.String,System.String,System.String)">
<summary>
create random test string for Visual and Instruction for Emulator
</summary>
</member>
<member name="P:VisualInterface.CreateRandomTest.rand">
<summary>
random seed
</summary>
</member>
<member name="T:VisualInterface.CreateRandomTest">
<summary>
 Create random tests on individual instructions EXCEPT MEM
</summary>
</member>
<member name="M:VisualInterface.CreateRandomTestLong.createdRandTestListLong(System.Int32,System.Int32)">
<summary>
 create list of tests with multiple random instructions
</summary>
</member>
<member name="M:VisualInterface.CreateRandomTestLong.createRandomTestLong(System.Int32,System.String,System.String)">
<summary>
 create one test with multiple random instructions
 Use RAND for random instructions
</summary>
</member>
<member name="P:VisualInterface.CreateRandomTestLong.instNameArr">
<summary>
array of all valid instruction names
</summary>
</member>
<member name="M:VisualInterface.CreateRandomTestLong.createRandomTestRestrictReg(System.Int32,System.String,System.String,System.String)">
<summary>
create random test string for Visual and Instruction for Emulator with restricted registers
</summary>
</member>
<member name="P:VisualInterface.CreateRandomTestLong.rand">
<summary>
 random seed
</summary>
</member>
<member name="T:VisualInterface.CreateRandomTestLong">
<summary>
Create random tests on multiple instructions EXCEPT MEM
</summary>
</member>
<member name="T:VisualInterface.CreateTest">
<summary>
Create custom tests manually
</summary>
</member>
<member name="M:VisualInterface.VIProgram.VisualUnitTest(System.String,System.String,System.String,Microsoft.FSharp.Collections.FSharpList{System.Tuple{VisualInterface.VisualInterface.Out,System.Int32}})">
<summary>
 run an expecto test of VisUAL
 name - name of test

</summary>
</member>
<member name="M:VisualInterface.VIProgram.strToFlags(System.String)">
<summary>
 convenience function, convert 4 char string to NZCV status flag record
</summary>
</member>
<member name="M:VisualInterface.VIProgram.RunVisualWithFlagsOutLocs(Microsoft.FSharp.Collections.FSharpList{System.Int32},System.String)">
<summary>
 Run Visual with specified source code and list of memory locations to trace
 src - source code
 memLocs - list of memory locations to trace
</summary>
</member>
<member name="M:VisualInterface.VIProgram.RunVisualWithFlagsOut``1(``0,System.String)">
<summary>
 Adds postlude to assembly code to detect flags values.
 Returns registers (before flag detection code) * flags
</summary>
</member>
<member name="P:VisualInterface.VIProgram.NZCVToR12">
<summary>
 postlude which sets R1 bits to status bit values
</summary>
</member>
<member name="T:VisualInterface.VisualInterface.Params">
<summary>
 configuration data for running VisUAL
</summary>
</member>
</members>
</doc>
